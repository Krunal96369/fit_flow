rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow authenticated users to read exercises collection
    match /exercises/{exerciseId} {
      allow read: if request.auth != null;
      // Allow authenticated users to toggle favorite state on exercises
      allow update: if request.auth != null
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isFavorite']);
    }

    // Allow authenticated users to read data in consultations collection
    match /consultations/{consultationId}/matters/{matterId} {
      allow read: if request.auth != null;
    }

    // Allow authenticated users to update their own user profile (DEPRECATED: use user_profiles)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // IMPORTANT: Allow access to all subcollections under user's own document
      match /{subcollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // IMPORTANT: Access rule for nutrition summaries
    match /nutrition_summaries/{summaryId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Rules for foods collection
    match /foods/{foodId} {
      allow read: if request.auth != null;
      // Allow creating custom food if createdBy matches auth uid
      allow create: if request.auth != null &&
        request.resource.data.isCustom == true &&
        request.resource.data.createdBy == request.auth.uid;
      // Allow updating own custom food
      allow update: if request.auth != null &&
        resource.data.isCustom == true &&
        resource.data.createdBy == request.auth.uid;
      // Allow deleting own custom food
      allow delete: if request.auth != null &&
        resource.data.isCustom == true &&
        resource.data.createdBy == request.auth.uid;
    }

    // Rules for user-specific nutrition data
    match /food_favorites/{favoriteId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /recent_foods/{recentId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /nutrition_entries/{entryId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Allow users to read and write their own profiles
    match /user_profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      // Points to user_profiles collection
      let userDoc = get(/databases/$(database)/documents/user_profiles/$(request.auth.uid));
      return userDoc.exists && userDoc.data.isAdmin == true;
    }

    // Restrict app_config - only admins can access
    match /app_config/{docId} {
      allow read, write: if request.auth != null && isAdmin();
    }
  }
}
